Sree1>kubectl get deploy
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   2         2         2            2           2d
nginx-sree         1         1         1            1           3d
Sree1>kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
deployment.apps/kubernetes-bootcamp created
Sree1>kubectl get deploy
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           2s
nginx-deployment      2         2         2            2           2d
nginx-sree            1         1         1            1           3d
Sree1>kubectl get po
NAME                                   READY     STATUS      RESTARTS   AGE
kubernetes-bootcamp-5c69669756-lcmff   1/1       Running     0          10s
nginx-deployment-6ddf4c5bf7-85hrl      1/1       Running     0          2d
nginx-deployment-6ddf4c5bf7-hdvcm      1/1       Running     0          2d
nginx-sree-5585ddc57d-nddzg            1/1       Running     0          3d
pi-9hvdw                               0/1       Completed   0          3d
Sree1>export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' |grep kubernetes-bootcamp)
Sree1>echo Name of the Pod: $POD_NAME
Name of the Pod: kubernetes-bootcamp-5c69669756-lcmff
Sree1>curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-lcmff | v=1


Sree2>kubectl proxy
Starting to serve on 127.0.0.1:8001

Sree1>curl http://localhost:8001/version
{
  "major": "1",
  "minor": "10",
  "gitVersion": "v1.10.0",
  "gitCommit": "fc32d2f3698e36b93322a3465f63a14e9f0eaead",
  "gitTreeState": "clean",
  "buildDate": "2018-03-26T16:44:10Z",
  "goVersion": "go1.9.3",
  "compiler": "gc",
  "platform": "linux/amd64"
}

Sree1>kubectl get po
NAME                                   READY     STATUS      RESTARTS   AGE
kubernetes-bootcamp-5c69669756-lcmff   1/1       Running     0          5h
nginx-deployment-6ddf4c5bf7-85hrl      1/1       Running     0          2d
nginx-deployment-6ddf4c5bf7-hdvcm      1/1       Running     0          2d
nginx-sree-5585ddc57d-nddzg            1/1       Running     0          3d
pi-9hvdw                               0/1       Completed   0          3d
Sree1>export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' |grep kubernetes-bootcamp)
Sree1>echo Name of the Pod: $POD_NAME
Name of the Pod: kubernetes-bootcamp-5c69669756-lcmff

Sree1>curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-lcmff | v=1

Kubernetes Pods
When you created a Deployment in Module 2, Kubernetes created a Pod to host your application instance. A Pod is a Kubernetes abstraction that represents a group of one or more application containers (such as Docker or rkt), and some shared resources for those containers. Those resources include:

Shared storage, as Volumes
Networking, as a unique cluster IP address
Information about how to run each container, such as the container image version or specific ports to use
A Pod models an application-specific "logical host" and can contain different application containers which are relatively tightly coupled. For example, a Pod might include both the container with your Node.js app as well as a different container that feeds the data to be published by the Node.js webserver. The containers in a Pod share an IP Address and port space, are always co-located and co-scheduled, and run in a shared context on the same Node.

Pods are the atomic unit on the Kubernetes platform. When we create a Deployment on Kubernetes, that Deployment creates Pods with containers inside them (as opposed to creating containers directly). Each Pod is tied to the Node where it is scheduled, and remains there until termination (according to restart policy) or deletion. In case of a Node failure, identical Pods are scheduled on other available Nodes in the cluster.


Nodes
A Pod always runs on a Node. A Node is a worker machine in Kubernetes and may be either a virtual or a physical machine, depending on the cluster. Each Node is managed by the Master. A Node can have multiple pods, and the Kubernetes master automatically handles scheduling the pods across the Nodes in the cluster. The Master's automatic scheduling takes into account the available resources on each Node.

Every Kubernetes Node runs at least:

Kubelet, a process responsible for communication between the Kubernetes Master and the Node; it manages the Pods and the containers running on a machine.
A container runtime (like Docker, rkt) responsible for pulling the container image from a registry, unpacking the container, and running the application.

Containers should only be scheduled together in a single Pod if they are tightly coupled and need to share resources such as disk.

Troubleshooting with kubectl
The most common operations can be done with the following kubectl commands:

kubectl get - list resources
kubectl describe - show detailed information about a resource
kubectl logs - print the logs from a container in a pod
kubectl exec - execute a command on a container in a pod
You can use these commands to see when applications were deployed, what their current statuses are, where they are running and what their configurations are.


Sree1>kubectl exec kubernetes-bootcamp-5c69669756-lcmff env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=kubernetes-bootcamp-5c69669756-lcmff
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_PORT_443_TCP_PORT=443
MY_SERVICE_PORT_8081_TCP=tcp://10.101.22.242:8081
KUBERNETES_SERVICE_HOST=10.96.0.1
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
MY_SERVICE_SERVICE_PORT=8081
MY_SERVICE_PORT_8081_TCP_ADDR=10.101.22.242
KUBERNETES_SERVICE_PORT=443
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
MY_SERVICE_SERVICE_HOST=10.101.22.242
MY_SERVICE_PORT_8081_TCP_PORT=8081
KUBERNETES_PORT_443_TCP_PROTO=tcp
MY_SERVICE_PORT=tcp://10.101.22.242:8081
MY_SERVICE_PORT_8081_TCP_PROTO=tcp
NPM_CONFIG_LOGLEVEL=info
NODE_VERSION=6.3.1
HOME=/root


Sree1>kubectl exec -ti kubernetes-bootcamp-5c69669756-lcmff bash
root@kubernetes-bootcamp-5c69669756-lcmff:/# ls -l
total 452
drwxr-xr-x   2 root root   4096 Jun  8  2016 bin
drwxr-xr-x   2 root root   4096 May 30  2016 boot
-rw-------   1 root root 393216 Jun  9  2016 core
drwxr-xr-x   5 root root    360 Jul  7 05:51 dev
drwxr-xr-x   1 root root   4096 Jul  7 05:51 etc
drwxr-xr-x   2 root root   4096 May 30  2016 home
drwxr-xr-x   1 root root   4096 Jun  9  2016 lib
drwxr-xr-x   2 root root   4096 Jun  8  2016 lib64
drwxr-xr-x   2 root root   4096 Jun  8  2016 media
drwxr-xr-x   2 root root   4096 Jun  8  2016 mnt
drwxr-xr-x   2 root root   4096 Jun  8  2016 opt
dr-xr-xr-x 234 root root      0 Jul  7 05:51 proc
drwx------   1 root root   4096 Jul 22  2016 root
drwxr-xr-x   1 root root   4096 Jul  7 05:51 run
drwxr-xr-x   2 root root   4096 Jun  8  2016 sbin
-rw-r--r--   1 root root    742 Jul 29  2016 server.js
drwxr-xr-x   2 root root   4096 Jun  8  2016 srv
dr-xr-xr-x  12 root root      0 Jul  7 05:51 sys
drwxrwxrwt   1 root root   4096 Jul 22  2016 tmp
drwxr-xr-x   1 root root   4096 Jul 22  2016 usr
drwxr-xr-x   1 root root   4096 Jul 22  2016 var
root@kubernetes-bootcamp-5c69669756-lcmff:/# pwd
/
root@kubernetes-bootcamp-5c69669756-lcmff:/# cat server.js 
var http = require('http');
var requests=0;
var podname= process.env.HOSTNAME;
var startTime;
var host;
var handleRequest = function(request, response) {
  response.setHeader('Content-Type', 'text/plain');
  response.writeHead(200);
  response.write("Hello Kubernetes bootcamp! | Running on: ");
  response.write(host);
  response.end(" | v=1\n");
  console.log("Running On:" ,host, "| Total Requests:", ++requests,"| App Uptime:", (new Date() - startTime)/1000 , "seconds", "| Log Time:",new Date());
}
var www = http.createServer(handleRequest);
www.listen(8080,function () {
    startTime = new Date();;
    host = process.env.HOSTNAME;
    console.log ("Kubernetes Bootcamp App Started At:",startTime, "| Running On: " ,host, "\n" );
});
root@kubernetes-bootcamp-5c69669756-lcmff:/# curl localhost:8080
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-lcmff | v=1




Overview of Kubernetes Services
Kubernetes Pods are mortal. Pods in fact have a lifecycle. When a worker node dies, the Pods running on the Node are also lost. A ReplicationController might then dynamically drive the cluster back to desired state via creation of new Pods to keep your application running. As another example, consider an image-processing backend with 3 replicas. Those replicas are fungible; the front-end system should not care about backend replicas or even if a Pod is lost and recreated. That said, each Pod in a Kubernetes cluster has a unique IP address, even Pods on the same Node, so there needs to be a way of automatically reconciling changes among Pods so that your applications continue to function.

A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them. Services enable a loose coupling between dependent Pods. A Service is defined using YAML (preferred) or JSON, like all Kubernetes objects. The set of Pods targeted by a Service is usually determined by a LabelSelector (see below for why you might want a Service without including selector in the spec).

Although each Pod has a unique IP address, those IPs are not exposed outside the cluster without a Service. Services allow your applications to receive traffic. Services can be exposed in different ways by specifying a type in the ServiceSpec:

ClusterIP (default) - Exposes the Service on an internal IP in the cluster. This type makes the Service only reachable from within the cluster.
NodePort - Exposes the Service on the same port of each selected Node in the cluster using NAT. Makes a Service accessible from outside the cluster using <NodeIP>:<NodePort>. Superset of ClusterIP.
LoadBalancer - Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP to the Service. Superset of NodePort.
ExternalName - Exposes the Service using an arbitrary name (specified by externalName in the spec) by returning a CNAME record with the name. No proxy is used. This type requires v1.7 or higher of kube-dns.

Additionally, note that there are some use cases with Services that involve not defining selector in the spec. A Service created without selector will also not create the corresponding Endpoints object. This allows users to manually map a Service to specific endpoints. Another possibility why there may be no selector is you are strictly using type: ExternalName.
Summary

    Exposing Pods to external traffic
    Load balancing traffic across multiple Pods
    Using labels

A Kubernetes Service is an abstraction layer which defines a logical set of Pods and enables external traffic exposure, load balancing and service discovery for those Pods.



A Service routes traffic across a set of Pods. Services are the abstraction that allow pods to die and replicate in Kubernetes without impacting your application. Discovery and routing among dependent Pods (such as the frontend and backend components in an application) is handled by Kubernetes Services.

Services match a set of Pods using labels and selectors, a grouping primitive that allows logical operation on objects in Kubernetes. Labels are key/value pairs attached to objects and can be used in any number of ways:

    Designate objects for development, test, and production
    Embed version tags
    Classify an object using tags


Sree1>kubectl get deploy
No resources found.
Sree1>kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   41d
Sree1>kubectl get po
No resources found.

You can create a Service at the same time you create a Deployment by using
--expose in kubectl.

Sree1>kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
deployment.apps/kubernetes-bootcamp created
Sree1>kubectl get deploy
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           5s
Sree1>kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   41d
Sree1>kubectl get po
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          21s
Sree1>


Sree1>kubectl get po
No resources found.
Sree1>kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
deployment.apps/kubernetes-bootcamp created
Sree1>kubectl get deploy
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           5s
Sree1>kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   41d
Sree1>kubectl get po
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          21s
Sree1>kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   41d
Sree1>kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
service/kubernetes-bootcamp exposed
Sree1>kubectl get svc
NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
kubernetes            ClusterIP   10.96.0.1       <none>        443/TCP          41d
kubernetes-bootcamp   NodePort    10.104.58.233   <none>        8080:30584/TCP   2s

Sree1>kubectl describe services/kubernetes-bootcamp
Name:                     kubernetes-bootcamp
Namespace:                default
Labels:                   run=kubernetes-bootcamp
Annotations:              <none>
Selector:                 run=kubernetes-bootcamp
Type:                     NodePort
IP:                       10.104.58.233
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30584/TCP
Endpoints:                172.17.0.5:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
Sree1>kubectl describe svc/kubernetes-bootcamp
Name:                     kubernetes-bootcamp
Namespace:                default
Labels:                   run=kubernetes-bootcamp
Annotations:              <none>
Selector:                 run=kubernetes-bootcamp
Type:                     NodePort
IP:                       10.104.58.233
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30584/TCP
Endpoints:                172.17.0.5:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
Sree1>

Sree1>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
Sree1>echo NODE_PORT=$NODE_PORT
NODE_PORT=30584

Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-6lgls | v=1


Sree1>kubectl get deploy
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           14m
Sree1>kubectl describe deploy 
Name:                   kubernetes-bootcamp
Namespace:              default
CreationTimestamp:      Sat, 07 Jul 2018 17:37:25 +0530
Labels:                 run=kubernetes-bootcamp
Annotations:            deployment.kubernetes.io/revision=1
Selector:               run=kubernetes-bootcamp
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  run=kubernetes-bootcamp
  Containers:
   kubernetes-bootcamp:
    Image:        gcr.io/google-samples/kubernetes-bootcamp:v1
    Port:         8080/TCP
    Host Port:    0/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   kubernetes-bootcamp-5c69669756 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  14m   deployment-controller  Scaled up replica set kubernetes-bootcamp-5c69669756 to 1
Sree1>

Services and Labels
Labels can be attached to objects at creation time or later on. They can be modified at any time. Let's expose our application now using a Service and apply some labels.

Sree1>export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
Sree1>echo Name of the Pod: $POD_NAME
Name of the Pod: kubernetes-bootcamp-5c69669756-6lgls
Sree1>kubectl label pod $POD_NAME app=v1
pod/kubernetes-bootcamp-5c69669756-6lgls labeled
Sree1>kubectl describe pods $POD_NAME
Name:           kubernetes-bootcamp-5c69669756-6lgls
Namespace:      default
Node:           minikube/10.0.2.15
Start Time:     Sat, 07 Jul 2018 17:37:25 +0530
Labels:         app=v1
                pod-template-hash=1725225312
                run=kubernetes-bootcamp
Annotations:    <none>
Status:         Running
IP:             172.17.0.5
Controlled By:  ReplicaSet/kubernetes-bootcamp-5c69669756
...
bla bla
...

Sree1>kubectl get pods -l app=v1
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          20m

Running Multiple Instances of Your App

Scaling an application

In the previous modules we created a Deployment, and then exposed it publicly via a Service. The Deployment created only one Pod for running our application. When traffic increases, we will need to scale the application to keep up with user demand.

Scaling is accomplished by changing the number of replicas in a Deployment



Scaling out a Deployment will ensure new Pods are created and scheduled to Nodes with available resources. Scaling in will reduce the number of Pods to the new desired state. Kubernetes also supports autoscaling of Pods, but it is outside of the scope of this tutorial. Scaling to zero is also possible, and it will terminate all Pods of the specified Deployment.

Running multiple instances of an application will require a way to distribute the traffic to all of them. Services have an integrated load-balancer that will distribute network traffic to all Pods of an exposed Deployment. Services will monitor continuously the running Pods using endpoints, to ensure the traffic is sent only to available Pods.

Scaling is accomplished by changing the number of replicas in a Deployment.

Once you have multiple instances of an Application running, you would be able to do Rolling updates without downtime. We'll cover that in the next module. Now, let's go to the online terminal and scale our application.

The DESIRED state is showing the configured number of replicas

The CURRENT state show how many replicas are running now

The UP-TO-DATE is the number of replicas that were updated to match the desired (configured) state

The AVAILABLE state shows how many replicas are actually AVAILABLE to the users

Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           28m
Sree1>kubectl get pods
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          31m
Sree1>kubectl scale deployments/kubernetes-bootcamp --replicas=4
deployment.extensions/kubernetes-bootcamp scaled
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   4         4         4            4           31m
Sree1>kubectl get pods
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          31m
kubernetes-bootcamp-5c69669756-gz4mj   1/1       Running   0          17s
kubernetes-bootcamp-5c69669756-l64rh   1/1       Running   0          17s
kubernetes-bootcamp-5c69669756-zfhhx   1/1       Running   0          17s
Sree1>kubectl get pods -o wide
NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          32m       172.17.0.5   minikube
kubernetes-bootcamp-5c69669756-gz4mj   1/1       Running   0          48s       172.17.0.7   minikube
kubernetes-bootcamp-5c69669756-l64rh   1/1       Running   0          48s       172.17.0.8   minikube
kubernetes-bootcamp-5c69669756-zfhhx   1/1       Running   0          48s       172.17.0.9   minikube
Sree1>

Sree1>kubectl describe deployments/kubernetes-bootcamp
Name:                   kubernetes-bootcamp
Namespace:              default
CreationTimestamp:      Sat, 07 Jul 2018 17:37:25 +0530
Labels:                 run=kubernetes-bootcamp
Annotations:            deployment.kubernetes.io/revision=1
Selector:               run=kubernetes-bootcamp
Replicas:               4 desired | 4 updated | 4 total | 4 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  run=kubernetes-bootcamp
  Containers:
   kubernetes-bootcamp:
    Image:        gcr.io/google-samples/kubernetes-bootcamp:v1
    Port:         8080/TCP
    Host Port:    0/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  <none>
NewReplicaSet:   kubernetes-bootcamp-5c69669756 (4/4 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  35m   deployment-controller  Scaled up replica set kubernetes-bootcamp-5c69669756 to 1
  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled up replica set kubernetes-bootcamp-5c69669756 to 4

There are 4 Pods now, with different IP addresses. The change was registered in the Deployment events log. To check that, use the describe command:

Load Balancing

Let’s check that the Service is load-balancing the traffic. To find out the exposed IP and Port we can use the describe service as we learned in the previously Module:

Sree1>kubectl describe services/kubernetes-bootcamp
Name:                     kubernetes-bootcamp
Namespace:                default
Labels:                   run=kubernetes-bootcamp
Annotations:              <none>
Selector:                 run=kubernetes-bootcamp
Type:                     NodePort
IP:                       10.104.58.233
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30584/TCP
Endpoints:                172.17.0.5:8080,172.17.0.7:8080,172.17.0.8:8080 + 1 more...
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
Sree1>


Sree1>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
Sree1>echo NODE_PORT=$NODE_PORT
NODE_PORT=30584
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-gz4mj | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-6lgls | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-zfhhx | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-zfhhx | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-l64rh | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-l64rh | v=1
Sree1>kubectl get pods -o wide
NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          41m       172.17.0.5   minikube
kubernetes-bootcamp-5c69669756-gz4mj   1/1       Running   0          10m       172.17.0.7   minikube
kubernetes-bootcamp-5c69669756-l64rh   1/1       Running   0          10m       172.17.0.8   minikube
kubernetes-bootcamp-5c69669756-zfhhx   1/1       Running   0          10m       172.17.0.9   minikube
Sree1>

Scale Down

Sree1>kubectl scale deployments/kubernetes-bootcamp --replicas=2
deployment.extensions/kubernetes-bootcamp scaled
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         2         2            2           42m
Sree1>kubectl get pods -o wide
NAME                                   READY     STATUS        RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running       0          43m       172.17.0.5   minikube
kubernetes-bootcamp-5c69669756-gz4mj   1/1       Terminating   0          11m       172.17.0.7   minikube
kubernetes-bootcamp-5c69669756-l64rh   1/1       Running       0          11m       172.17.0.8   minikube
kubernetes-bootcamp-5c69669756-zfhhx   1/1       Terminating   0          11m       172.17.0.9   minikube
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-l64rh | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-6lgls | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-6lgls | v=1
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-l64rh | v=1

Performing a Rolling Update


Updating an application

Users expect applications to be available all the time and developers are expected to deploy new versions of them several times a day. In Kubernetes this is done with rolling updates. Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources.

In the previous module we scaled our application to run multiple instances. This is a requirement for performing updates without affecting application availability. By default, the maximum number of Pods that can be unavailable during the update and the maximum number of new Pods that can be created, is one. Both options can be configured to either numbers or percentages (of Pods). In Kubernetes, updates are versioned and any Deployment update can be reverted to previous (stable) version.

Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones.



Similar to application Scaling, if a Deployment is exposed publicly, the Service will load-balance the traffic only to available Pods during the update. An available Pod is an instance that is available to the users of the application.

Rolling updates allow the following actions:

    Promote an application from one environment to another (via container image updates)
    Rollback to previous versions
    Continuous Integration and Continuous Delivery of applications with zero downtime

If a Deployment is exposed publicly, the Service will load-balance the traffic only to available Pods during the update.

In the following interactive tutorial, we'll update our application to a new version, and also perform a rollback.

Update the version of the app

To list your deployments use the get deployments command: kubectl get deployments

To list the running Pods use the get pods command:

kubectl get pods

To view the current image version of the app, run a describe command against the Pods (look at the Image field):

kubectl describe pods

Sree1>kubectl get pods -o wide
NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Running   0          1h        172.17.0.5   minikube
kubernetes-bootcamp-5c69669756-l64rh   1/1       Running   0          33m       172.17.0.8   minikube
Sree1>kubectl describe pods kubernetes-bootcamp-5c69669756-6lgls
Name:           kubernetes-bootcamp-5c69669756-6lgls
Namespace:      default
Node:           minikube/10.0.2.15
Start Time:     Sat, 07 Jul 2018 17:37:25 +0530
Labels:         app=v1
                pod-template-hash=1725225312
                run=kubernetes-bootcamp
Annotations:    <none>
Status:         Running
IP:             172.17.0.5
Controlled By:  ReplicaSet/kubernetes-bootcamp-5c69669756
Containers:
  kubernetes-bootcamp:
    Container ID:   docker://b258c801e58812e6b49b8d697f8b16e13b445ffc4783b138eb490f1b346b441b
    Image:          gcr.io/google-samples/kubernetes-bootcamp:v1
    Image ID:       docker-pullable://gcr.io/google-samples/kubernete


Sree1>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
deployment.extensions/kubernetes-bootcamp image updated

Sree1>kubectl get pods 
NAME                                   READY     STATUS        RESTARTS   AGE
kubernetes-bootcamp-5c69669756-6lgls   1/1       Terminating   0          1h
kubernetes-bootcamp-5c69669756-l64rh   1/1       Terminating   0          36m
kubernetes-bootcamp-7799cbcb86-twczl   1/1       Running       0          25s
kubernetes-bootcamp-7799cbcb86-xzk29   1/1       Running       0          16s

Sree1>kubectl describe services/kubernetes-bootcamp
Name:                     kubernetes-bootcamp
Namespace:                default
Labels:                   run=kubernetes-bootcamp
Annotations:              <none>
Selector:                 run=kubernetes-bootcamp
Type:                     NodePort
IP:                       10.104.58.233
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30584/TCP
Endpoints:                172.17.0.7:8080,172.17.0.9:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
Sree1>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
Sree1>echo NODE_PORT=$NODE_PORT
NODE_PORT=30584
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-7799cbcb86-twczl | v=2

Rollback an update

Sree1>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10
deployment.extensions/kubernetes-bootcamp image updated
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         3         1            2           1h
Sree1>kubectl get pods
NAME                                   READY     STATUS         RESTARTS   AGE
kubernetes-bootcamp-5f76cd7b94-llmqq   0/1       ErrImagePull   0          8s
kubernetes-bootcamp-7799cbcb86-twczl   1/1       Running        0          10m
kubernetes-bootcamp-7799cbcb86-xzk29   1/1       Running        0          10m
Sree1>


Sree1>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10
deployment.extensions/kubernetes-bootcamp image updated
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         3         1            2           1h
Sree1>kubectl get pods
NAME                                   READY     STATUS         RESTARTS   AGE
kubernetes-bootcamp-5f76cd7b94-llmqq   0/1       ErrImagePull   0          8s
kubernetes-bootcamp-7799cbcb86-twczl   1/1       Running        0          10m
kubernetes-bootcamp-7799cbcb86-xzk29   1/1       Running        0          10m
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-7799cbcb86-twczl | v=2
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-7799cbcb86-xzk29 | v=2
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-7799cbcb86-xzk29 | v=2
Sree1>curl $(minikube ip):$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-7799cbcb86-twczl | v=2
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         3         1            2           1h
Sree1>kubectl rollout undo deployments/kubernetes-bootcamp
deployment.extensions/kubernetes-bootcamp
Sree1>kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         2         2            2           1h
Sree1>kubectl get pods
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-7799cbcb86-twczl   1/1       Running   0          12m
kubernetes-bootcamp-7799cbcb86-xzk29   1/1       Running   0          12m
Sree1>

