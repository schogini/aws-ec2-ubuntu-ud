ELB/EXPOSE
http://docs.heptio.com/content/tutorials/aws-qs-services-elb.html


http://docs.heptio.com/content/tutorials/aws-cloudformation-k8s.html
https://s3.amazonaws.com/quickstart-reference/heptio/latest/doc/heptio-kubernetes-on-the-aws-cloud.pdf

STACK=k8s-aws
TEMPLATEPATH=https://s3.amazonaws.com/quickstart-reference/heptio/latest/templates/kubernetes-cluster-with-new-vpc.template
TEMPLATEPATH=file://./kubernetes-cluster-with-new-vpc.template
AZ=us-east-1a
INGRESS=0.0.0.0/0
KEYNAME=SreeDemoKeyUSEast
REGION=us-east-1
#AWS user: git
aws cloudformation create-stack --region $REGION --profile sch --stack-name $STACK \
--template-body $TEMPLATEPATH \
--capabilities CAPABILITY_NAMED_IAM \
--parameters ParameterKey=AvailabilityZone,ParameterValue=$AZ \
ParameterKey=AdminIngressLocation,ParameterValue=$INGRESS \
ParameterKey=KeyName,ParameterValue=$KEYNAME


SSH_KEY=~/vms/aws/SreeDemoKeyUSEast.pem.txt; 
scp -i $SSH_KEY -o ProxyCommand="ssh -i \"${SSH_KEY}\" ubuntu@54.173.134.77 nc \
%h %p" ubuntu@10.0.18.21:~/kubeconfig ./kubeconfig 

export KUBECONFIG=$(pwd)/kubeconfig

SreeMacMin16GB:k-aws sree$ cat kubeconfig 
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNE1EY3dOVEUxTkRNd04xb1hEVEk0TURjd01qRTFORE13TjFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDBQCk5kQTZpQlpqVDJwK3lMaUpSR2ZQdWdaNEFBL1A0ZTE0VEpOeDNrb0RrS3lpWUNodVlpUnlZME1tVjEzdVlFVjEKZjYyRTkyYXc5RDV5bm5sa0lYTW5ob0NlSE02Z3A1R0xZQmlaeThadkpFb3N4R1NSU1lOWE9xbk1QYzNrcW9YSgp5QVp2YWU3UVEzMFRSUHY3alcrY21BSGF2TUFRL0o4UnFLNk4xdTYvV20vODcyUEJaODVqUitHeTFTbk1JbGh0ClQ3YXF0K2VtbTNXOHlSZTdVbVZjTS8rK1FrWHBqVkZ1c1dIa29mYzNLa25kbUszVC9oSEZXU1V2d2htbm9IT1YKTlV0am0rRERqNUluVVM3RDB5dnAzVG4xSWpTbFloVVdLQlNWWHVyNktBZHVmRHIrbmp1dEJSck0vNlAvdjNTNwozbGk4NUZzMWdYano1YnJVNVpjQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJMjVYRTdtMUN5Wk1kNktidjQxUE9ZWWU2SzYKcW1DVXAwWHg5TTVUNWgyeS9OcFVRdHFMWDVsQ1loUGlyOUJ4NDdHYnZXeW0zOGM3bWpTVXVVdjJSUUN2STRCeApIbFNqemFLdDlwWFRQZmliVkZZNGNNdCtBdGJQWGFXdXFOdGE0UkJ3eWd1dHhRNXJEeWNoS3Bxa0t3VVhrMFoxCkhjUFlYU3dnUDBWdnlXNWpsYlkxR0tFMFNiazBmYUJjNlU2Q3dTTWpoTFY0MFB5WlArQ0U0S0ZlSk5rZnB2QWIKWmJTV3RGa2M3eWUzVlkyZ3RPbFI2SzczczZydkdRbDN5eVM0UEpEenJyc1kwREIwbVFOYTdWclBDamZqWUhoNgpCaFBidzdwSGpNbExhRmlWTjE3Nks2ZHRlQm1WNVVkR21OMW40V2VyaE9rU1VLWERCN2JBbVNTMjQ0Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://k8s-aws-k-apiloadb-135h9b2wcd5dc-400618749.us-east-1.elb.amazonaws.com
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: admin
  name: admin@kubernetes
current-context: admin@kubernetes
kind: Config
preferences: {}
users:
- name: admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN6akNDQWJhZ0F3SUJBZ0lJQzN0c28vYXVCQ0F3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB4T0RBM01EVXhOVFF6TURkYUZ3MHhPVEEzTURVeE5UUTBNRE5hTUJBeApEakFNQmdOVkJBTVRCV0ZrYldsdU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCng2b0NIMktYUzR1UVNncXRxMFpIWWNoVHliTFZWd3JYRko3bjJGY2t0cFkxZlMrSDQveHN1NnVsMG0xeVo0YmcKbk9KZFJuRnlmaTNCZ1JYa05UaWhwRHhUaWo2dUZScGEvV3hzeXJYbDZXOHlIWG1BTlVXei9hOVhibDM0eHlEMQpsUHY5OVJOR1lvS05TV1JGbXY5Rno4U2U4MkFQejRMREZWTDRaWFBITW1EY2pYOTdUdlNvbU1ZaU5qdjFNM2tBClR0QjV3WGVKUzA5SHJQRk9jZHZhbmxMbDVkYmtZeFQvTVFLUDY0cm5QenoxZ1BkOUl6b2xTU3cwZ1pyNk1YM3YKR01xQko3ZHVZVGVYeTFaWnBoV2p2LzQrb3dDR1BNanVraE8zYXRzVVVWR2N4OEdZQTN5a1JwR2lReHkvMUV6OAo1VzRBUGxzVHpFOUw3S3ZCeUJXUVd3SURBUUFCb3ljd0pUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WURWUjBsCkJBd3dDZ1lJS3dZQkJRVUhBd0l3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUQzTmhuRW5Zb2daYzY0QitiNnMKc1RHRCt1K0liYllyMW41WEFLbi8zMHlxTCtaVkgrVCs4ZHliSWtSUm1PSW9ZaTNKbkpLbFZ5QlpuOHRZRnRUVgpmcnB1eE9ScVovZHFwY2FaT1ZvQlRkWUpvZGE3Vi8rRXNPMDlXVDRtb0tTeGpoZ00rL3FlaGsyclBLdDBCd0hyCi9lQWpmQ2JzdDB1d2tZQ3VKa2hZN3B4UTRUbDVjalhhOTk4eE5JaGhTOUhFNVF5cDZHQjlQWGtHZ0o4a2ovckUKdVMzVThrNXBXZjZRMm5PQWcxVmNla3g0SGJCamRKUW5OSFJMaC9hbTdUbkZidUJZNy9kMzdYRUpoeEo4MThiNgozeEVCTG5ZVk1HRlh3eDQ5Wk1yekVVTUZodnArcER5RWwwZ1lSb1pvVTdRK1RqWk1mbzRORjZta1NCaFBubjQ4CklHWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeDZvQ0gyS1hTNHVRU2dxdHEwWkhZY2hUeWJMVlZ3clhGSjduMkZja3RwWTFmUytICjQveHN1NnVsMG0xeVo0YmduT0pkUm5GeWZpM0JnUlhrTlRpaHBEeFRpajZ1RlJwYS9XeHN5clhsNlc4eUhYbUEKTlVXei9hOVhibDM0eHlEMWxQdjk5Uk5HWW9LTlNXUkZtdjlGejhTZTgyQVB6NExERlZMNFpYUEhNbURjalg5NwpUdlNvbU1ZaU5qdjFNM2tBVHRCNXdYZUpTMDlIclBGT2NkdmFubExsNWRia1l4VC9NUUtQNjRyblB6ejFnUGQ5Ckl6b2xTU3cwZ1pyNk1YM3ZHTXFCSjdkdVlUZVh5MVpacGhXanYvNCtvd0NHUE1qdWtoTzNhdHNVVVZHY3g4R1kKQTN5a1JwR2lReHkvMUV6ODVXNEFQbHNUekU5TDdLdkJ5QldRV3dJREFRQUJBb0lCQUVuNVllbnc1QzhZR1RCbApmbXlia0N6WlJMblE2UnZqcDBZN2paaG95UEJnL0paUit0M3NFdmtCSW1HeExSYlFNUDNQSEZIU0RHSlZYNEVNCjlFMEhtMU8zQ2hpSkdvUTFESXNpRmJpUTVncXpxUFNrcEd5WVU1UmsxMWJMdURWR3I5WXYrcXBISnVldWlOd3QKSzJDK3ZVVzZDazRQUkN4VXZTUjBaaFZvYk4vcnZhQklDZzJ3UFNSaW54a1FnTnZZdkVGdVQwNDJYaWdsdHNHUApOeHppU2xGQm5NVWgxbDlmUVZ1TnhpWFNOclg3a2FvenpnN09ObnIrTTErdmR4MnRVSmNpRXJEZlBYRCt3dGhCClFPWmdwTDc2UE5QM2VPa2pPdXM1UENsVkpHWkQ0UWoyUUJDVS9jZ29SWXhaSDhzZE5DQVBoRFh0NlZuNStmdlIKOWo4NGg5RUNnWUVBM3hoY0w1WkZaNDBCWmQ5UHpsdVVPSjYvMlhLNVNiL0xaZktuaXduSmIyWU9odzVGK2lqUgphRjlud3NHaUxwZFN6d0RsdlF4emJXRGZaNFlxeExJSTJjZVBXSUxYTjNxQVFIbk0raEFZeTFOWGEwTUdNVHNaCk9hZUpKRXhpbXloTGhFT3VQUHhuYURsTWZzcmR4QTRpKzMwVXB1MmJKaTVOdkZrQXhoaXdQcWtDZ1lFQTVSenYKMGZ0UWpvQWRqcWk0a3psV29wMjBCeUZRMjc5NU9UdktkUlJ6QzV1cldJbzI3d3NyM3FiWnZMQmM3RkROdUJLdApybzlJVFZoTElZby9ldlNEcEFFclhldG1jbzFrVUp6alU1ZHlqSFEyR1g3b2xCeWsxZ2NVaDFqSUx0RFE5eDNkCjJUTS9kNFpMai82LzExMm1MbG5BSEY3elBUV05DWjNsT1NQQXpXTUNnWUVBaCtEaVpPbDFwRGd4bmNhQmFRSkcKS0tZbjIxMFFsV2FIajdSWGIwdXFzSHJNWmwyL0tUb3JNUkxLczhnVDY2U20vd1ZnNTkvcGZiaisyS0xTOGJJdAp5ZGJONis3ay9obFNlL0t6Y2FyVUx5SzNuOURXdUsxeUU3ZUN3K1R5T2VZMCtIM3daWnlscnNrWFdqSmRGOGcwCmJsQWtmL2RBQStVMzIzdXFDUDJJZXVFQ2dZQmtMUTNTNHk2cXordWNoN3NFYkVxc0dZWXdvK21GMjZkMlZlVkUKNGVjWGlUNFhIWCs5YjBZRU9USDA1YXdMaTUwWFFkdDgrcHNqYmxxVFZLNUM1WXgxZGlsdkRGRWoveHlBZnNpSwpzU3BkclNaR2FZM3B6TWhwNkhpYVlVQk43L0dlU3duSVFUY2IzTFZIUlp5OTN1MmRVSkxHRk9JSHZsVm5nZ2xLCnZZNDhmd0tCZ1FDeVlNd0tzSlpjU1hDSGJldERXcTd3cklUK3NPbW1pK0ZmU0QxbUlxcU4rUWQwamRSRUdrVDUKSmg5QjI3clhrM1BBbnlzYmV6UnA4dk1OdWJzKzdaNkdISlJ5Q1hYYis5cEZhS2xhbHhLMVlYNjQ2RTNZSEt3TApoRUpIdlU3emNLOExSblVnT2hRMDFhdkVocmU0K084MzFMNGNvUjRMYzRrdVJYYkVTcE5aR2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=


    SreeMacMin16GB:k-aws sree$ unset KUBECONFIG
SreeMacMin16GB:k-aws sree$ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready     master    40d       v1.10.0
SreeMacMin16GB:k-aws sree$ export KUBECONFIG=$(pwd)/kubeconfig
SreeMacMin16GB:k-aws sree$ kubectl get nodes
NAME                          STATUS    ROLES     AGE       VERSION
ip-10-0-0-121.ec2.internal    Ready     <none>    11m       v1.10.3
ip-10-0-18-21.ec2.internal    Ready     master    13m       v1.10.3
ip-10-0-20-238.ec2.internal   Ready     <none>    11m       v1.10.3
SreeMacMin16GB:k-aws sree$ unset KUBECONFIG
SreeMacMin16GB:k-aws sree$ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready     master    40d       v1.10.0
SreeMacMin16GB:k-aws sree$ export KUBECONFIG=$(pwd)/kubeconfig
SreeMacMin16GB:k-aws sree$ 


kubectl create namespace simple-demo
kubectl run --namespace simple-demo echoheaders --image=gcr.io/google_containers/echoserver:1.4 --replicas=1 --port=8080

SreeMacMin16GB:k-aws sree$ export KUBECONFIG=$(pwd)/kubeconfig
SreeMacMin16GB:k-aws sree$ kubectl create namespace simple-demo
namespace/simple-demo created
SreeMacMin16GB:k-aws sree$ kubectl run --namespace simple-demo echoheaders --image=gcr.io/google_containers/echoserver:1.4 --replicas=1 --port=8080
deployment.apps/echoheaders created
SreeMacMin16GB:k-aws sree$ kubectl get all --namespace simple-demo
NAME                               READY     STATUS    RESTARTS   AGE
pod/echoheaders-747cd5f9d5-mmvhn   1/1       Running   0          28s

NAME                          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/echoheaders   1         1         1            1           29s

NAME                                     DESIRED   CURRENT   READY     AGE
replicaset.apps/echoheaders-747cd5f9d5   1         1         1         30s
SreeMacMin16GB:k-aws sree$ 

We see:

A single Pod, po/echoheaders-2787888573-c3nt1, which runs the echoserver container
A single Replica Set, rs/echoheaders-2787888573, which manages the Pod and restarts it if it ever fails
A single Deployment, deploy/echoheaders, which is the object that created the Replica Set. This can be edited to update the application without causing downtime.

SreeMacMin16GB:k-aws sree$ kubectl expose --namespace=simple-demo deployment echoheaders --type=LoadBalancer --port=80 --target-port=8080 --name=echoheaders-p
service/echoheaders-p exposed
SreeMacMin16GB:k-aws sree$ kubectl --namespace=simple-demo describe service echoheaders-public

SreeMacMin16GB:k-aws sree$ kubectl --namespace=simple-demo describe service echoheaders-p
Name:                     echoheaders-p
Namespace:                simple-demo
Labels:                   run=echoheaders
Annotations:              <none>
Selector:                 run=echoheaders
Type:                     LoadBalancer
IP:                       10.111.189.39
LoadBalancer Ingress:     ab9f89310806c11e8930506c272292f8-1953854812.us-east-1.elb.amazonaws.com
Port:                     <unset>  80/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30520/TCP
Endpoints:                192.168.105.65:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Events:
  Type    Reason                Age   From                Message
  ----    ------                ----  ----                -------
  Normal  EnsuringLoadBalancer  52s   service-controller  Ensuring load balancer
  Normal  EnsuredLoadBalancer   49s   service-controller  Ensured load balancer


SreeMacMin16GB:k-aws sree$ kubectl --namespace=simple-demo get service echoheaders-p
NAME            TYPE           CLUSTER-IP      EXTERNAL-IP                                                               PORT(S)        AGE
echoheaders-p   LoadBalancer   10.111.189.39   ab9f89310806c11e8930506c272292f8-1953854812.us-east-1.elb.amazonaws.com   80:30520/TCP   1m

BROWSE http://ab9f89310806c11e8930506c272292f8-1953854812.us-east-1.elb.amazonaws.com/
======================================================================================
CLIENT VALUES:
client_address=192.168.31.128
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://ab9f89310806c11e8930506c272292f8-1953854812.us-east-1.elb.amazonaws.com:8080/

SERVER VALUES:
server_version=nginx: 1.10.0 - lua: 10001

HEADERS RECEIVED:
accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
accept-encoding=gzip, deflate
accept-language=en-US,en;q=0.5
connection=keep-alive
host=ab9f89310806c11e8930506c272292f8-1953854812.us-east-1.elb.amazonaws.com
upgrade-insecure-requests=1
user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0
BODY:
-no body in request-